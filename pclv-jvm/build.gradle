buildscript {
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    // lwjgl runtime dependencies, needed for local visualizer
    ext.lwjglVersion = '3.1.5'
    switch (org.gradle.internal.os.OperatingSystem.current()) {
        case org.gradle.internal.os.OperatingSystem.WINDOWS:
            ext.lwjglNatives = "natives-windows"
            break
        case org.gradle.internal.os.OperatingSystem.LINUX:
            ext.lwjglNatives = "natives-linux"
            break
        case org.gradle.internal.os.OperatingSystem.MAC_OS:
            ext.lwjglNatives = "natives-macos"
            break
    }
}

apply plugin: 'kotlin-platform-jvm'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

kotlin { experimental { coroutines 'enable' } }

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.5.1-1'
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}

idea {
    module {
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
    }
}

dependencies {
    expectedBy project(":pclv-common")

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    compile "de.fabmax:kool-core-jvm:$kool_version"
    compile 'org.nanohttpd:nanohttpd:2.3.1'
    compile 'org.java-websocket:Java-WebSocket:1.3.8'
    compile 'commons-cli:commons-cli:1.4'
    compile 'com.google.protobuf:protobuf-java:3.5.1'

    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    runtime "org.lwjgl:lwjgl:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-glfw:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-opengl:${lwjglVersion}:${lwjglNatives}"
}

clean {
    delete "${sourceSets.main.resources.srcDirs.toArray()[0]}/pclv-js"
    delete "${protobuf.generatedFilesBaseDir}"
}

task fatJar(type: Jar, dependsOn: [':pclv-js:build', 'build']) {
    manifest {
        attributes 'Main-Class': 'StartKt'
    }
    baseName = 'pclv'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from "${projectDir}/../pclv-js/build/web"
    with jar
}
